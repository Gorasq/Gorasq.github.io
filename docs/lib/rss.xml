<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Gorasq.github.io]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>lib\media\favicon.png</url><title>Gorasq.github.io</title><link/></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Sun, 18 Aug 2024 08:13:08 GMT</lastBuildDate><atom:link href="lib\rss.xml" rel="self" type="application/rss+xml"/><pubDate>Sun, 18 Aug 2024 08:13:07 GMT</pubDate><ttl>60</ttl><dc:creator/><item><title><![CDATA[[하계 모각코] 회고]]></title><description><![CDATA[
 <br>이번 하계 모각코를 진행하는 동안 데이터 전처리에 대해서 공부하였다. 이미지와 오디오 데이터의 전처리에 대하여 공부를 진행하였다. <br>두 번째 주간에 오디오 데이터 처리를 공부하다가 푸리에 변환이 데이터 가공에 필요한 중요한 함수인 것을 알고 이를 더 알아보았는데, 푸리에변환에 핵심적으로 필요한 급수가 이번 계절학기에 들은 미적분학 1에서 간단하게 다뤄졌던 테일러 급수, 그리고 앞으로 배울 오일러 공식을 사용한다는 점에서 수학이 데이터 처리분야에서 중요하게 사용된다는 것을 느끼고 수학을 더 열심히 해야겠다고 다짐하는 계기가 되었다. <br>오디오 전처리를 진행하기 위해 librosa 라이브러리와 pytorchaudio 라이브러리를 사용하였는데, wav형식 이외의 데이터를 사용하는 데에 있어서 어려움이 있어서  wav 형식으로 전환하고자 ffmpeg 라이브러리나 pydub의 audiosegment 모듈을 사용하려고 하였지만 어째서인지 컴퓨터 로컬 환경에서는 제대로 된 사용을 할 수 없어서 colab으로 진행하기도 하고 중단해야 했던 상황들이 있었다. 라이브러리에 대한 이해없이 남들의 내용을 보고 따라하려 했던 나 자신을 성찰하는 시간이 되었다. 남은 방학기간 동안 위에 나온 라이브러리들을 공부하는 시간을 가져야겠다. ]]></description><link>모각코\[하계-모각코]-회고.html</link><guid isPermaLink="false">모각코/[하계 모각코] 회고.md</guid><pubDate>Sun, 18 Aug 2024 08:02:02 GMT</pubDate></item><item><title><![CDATA[7/5]]></title><description><![CDATA[ 
 <br><br><br>데이터 전처리 방법을 조사하여 향후 프로젝트 제작 시 데이터 전처리 진행<br><br>7/5 : 데이터 전처리의 이해와 전반적인 조사 및 정리<br>
7/12 : 소리 데이터 전처리 방법 조사 및 정리<br>
7/18 : 소리 및 이미지 데이터 전처리 방법 조사 및 정리<br>
7/25 : 이미지 데이터 전처리 방법 조사 및 정리 + 조사 내용 취합 및 정리<br>
8/1 : 프로젝트 시작 -&gt; 이미지 전처리 실습<br>
8/8 : 프로젝트 코딩 -&gt; 이미지 전처리 + 오디오 전처리 실습]]></description><link>모각코\[2024-하계-모각코-202401818김승주-개인-계획].html</link><guid isPermaLink="false">모각코/[2024 하계 모각코 202401818김승주 개인 계획].md</guid><pubDate>Fri, 16 Aug 2024 13:25:18 GMT</pubDate></item><item><title><![CDATA[목표]]></title><description><![CDATA[ 
 <br><br>이미지 전처리 실습 3회차 &amp; 오디오 전처리 라이브러리 탐방<br><br><br>import cv2  
import numpy as np  
import os  
import matplotlib.pyplot as plt  
  
  
def blur(image, name: str):  
    new_image = cv2.blur(image, (10, 10))  
    path = 'FriedFood_blurred/blurred' + name  
    cv2.imwrite(path, new_image)  
  
  
def contrast(image, name: str):  
    image_yuv = cv2.cvtColor(image, cv2.COLOR_BGR2YUV)  
    image_yuv[:, :, 0] = cv2.equalizeHist(image_yuv[:, :, 0])  
    image_yuv[:, :, 1] = cv2.equalizeHist(image_yuv[:, :, 1])  
  
    new_image = cv2.cvtColor(image_yuv, cv2.COLOR_YUV2RGB)  
    path = 'FriedFood_contrast/'+'contrast'+name  
    cv2.imwrite(path, new_image)  
  
  
def resize(image, name: str, width=26, height=26):  
    new_image = cv2.resize(image, (width, height))  
    path = 'FriedFood_resized/'+'resized'+f'{width}_{height}'+name  
    cv2.imwrite(path, new_image)  
  
  
def empty_space(image, name: str, direction='horizontal', thick=15):  
    hor = np.shape(image)[1]  
    ver = np.shape(image)[0]  
    if direction == 'horizontal':  
        image[:, (hor//2-thick):(hor//2+thick), :] = np.zeros((ver, 2*thick, 3), dtype=int)  
    else:  
        image[(ver//2-thick):(ver//2+thick), :, :] = np.zeros((2*thick, hor, 3), dtype=int)  
    path = f'FriedFood_{direction}/'+'empty_space'+name  
    cv2.imwrite(path, image)  
  
  
def rectangle(image, name: str, x=50, y=50, line=-1):  
    hor = np.shape(image)[1]//2  
    ver = np.shape(image)[0]//2  
    start = (hor - x, ver - y)  
    end = (hor + x, ver + y)  
    new_image = cv2.rectangle(image, start, end, (0, 0, 0), -1)  
    path = 'FriedFood_rectangle/' + 'rectangle' + name  
    cv2.imwrite(path, new_image)  
  
  
new_folders = ['blurred', 'horizontal', 'vertical', 'resized', 'contrast', 'rectangle']  
for i in new_folders:  
    if not os.path.exists('FriedFood_'+ str(i)):  
        os.mkdir('FriedFood_'+str(i))  
    else:  
        continue  
  
for i, filename in enumerate(os.listdir('FriedFood')):  
    pic = cv2.imread('FriedFood/'+filename, cv2.IMREAD_COLOR)  
    blur(pic, filename)  
    resize(pic, filename)   
	contrast(pic, filename)   
	empty_space(pic, name=filename,direction='horizontal')
	empty_space(pic, name=filename, direction='vertical')
	rectangle(pic, name=filename)  
  
복사<br><br><a data-tooltip-position="top" aria-label="https://drive.google.com/file/d/1Q4G45mBZ3vjdaK9Kl2ap8XAAtrxdleV4/view?usp=sharing" rel="noopener" class="external-link" href="https://drive.google.com/file/d/1Q4G45mBZ3vjdaK9Kl2ap8XAAtrxdleV4/view?usp=sharing" target="_blank">코랩</a><br>참고 자료<br><a rel="noopener" class="external-link" href="https://pytorch.org/audio/main/tutorials/audio_feature_extractions_tutorial.html#preparation" target="_blank">https://pytorch.org/audio/main/tutorials/audio_feature_extractions_tutorial.html#preparation</a>]]></description><link>모각코\[하계-모각코]-6차-개인-목표-및-결과.html</link><guid isPermaLink="false">모각코/[하계 모각코] 6차 개인 목표 및 결과.md</guid><pubDate>Fri, 16 Aug 2024 13:24:00 GMT</pubDate></item><item><title><![CDATA[목표]]></title><description><![CDATA[ 
 <br><br>이미지 전처리 실습 2 번째 시간<br><br><a data-tooltip-position="top" aria-label="https://drive.google.com/file/d/1kYmobFv6ArcROp8lGlbAhrp-E2yxc_dD/view?usp=sharing" rel="noopener" class="external-link" href="https://drive.google.com/file/d/1kYmobFv6ArcROp8lGlbAhrp-E2yxc_dD/view?usp=sharing" target="_blank">실습</a><br>참고자료:<br>
<a data-tooltip-position="top" aria-label="https://ivo-lee.tistory.com/91" rel="noopener" class="external-link" href="https://ivo-lee.tistory.com/91" target="_blank">ivo_lee</a>]]></description><link>모각코\[하계-모각코]-5차-개인-목표-및-결과.html</link><guid isPermaLink="false">모각코/[하계 모각코] 5차 개인 목표 및 결과.md</guid><pubDate>Wed, 07 Aug 2024 14:52:16 GMT</pubDate></item><item><title><![CDATA[목표]]></title><description><![CDATA[ 
 <br><br>librosa 라이브러리 활용하여 소리 데이터 처리하기<br><br> <a data-tooltip-position="top" aria-label="https://colab.research.google.com/drive/1Yp5JsEs1WckhVuKra0Bn63-jGD7I7K5J?usp=sharing" rel="noopener" class="external-link" href="https://colab.research.google.com/drive/1Yp5JsEs1WckhVuKra0Bn63-jGD7I7K5J?usp=sharing" target="_blank">Colab 실습</a>]]></description><link>모각코\[하계-모각코]-3차-개인-목표-및-결과.html</link><guid isPermaLink="false">모각코/[하계 모각코] 3차 개인 목표 및 결과.md</guid><pubDate>Wed, 31 Jul 2024 11:53:16 GMT</pubDate></item><item><title><![CDATA[목표]]></title><description><![CDATA[ 
 <br><br>이미지 전처리 과정 공부 및 간단한 실습하기<br><br>pip install opencv-python
pip install opencv-contib-python
복사<br>이미지 데이터 전처리에 필요한 패키지를 설치해준다. 둘 중 아무거나 설치하면 된다. <br>import cv2  
import matplotlib.pyplot as plt  
import numpy as np
복사<br>cv2 의 imread()를 사용해서 이미지 파일을 적절한 형태로 불러온다. <br>image = cv2.imread("./user/picture/something.jpg", cv2.IMREAD_GRAYSCALE)
# 컬러  cv2.IMREAD_COLOR = -1 
#흑백 cv2.IMREAD_GRAYSCALE = 0 
# cv2.IMREAD_UNCHANGED = 1 
복사<br>cv2.IMREAD_COLOR, cv2.IMREAD_UNCHANGED 를 사용하여 필요한 형태로 바꾸어 준다.<br>
이외의 과정은 실습으로 대체하였다. <br><a data-tooltip-position="top" aria-label="https://drive.google.com/file/d/1PKPPJ36dOAGQNI6cedtBA9wsGvV7n7Qq/view?usp=sharing" rel="noopener" class="external-link" href="https://drive.google.com/file/d/1PKPPJ36dOAGQNI6cedtBA9wsGvV7n7Qq/view?usp=sharing" target="_blank">실습</a><br>오늘 진행한 것 외에도 많은 처리 기능이 있으니 추후에 더 공부할 생각이다. <br>참고자료:<br>
<a data-tooltip-position="top" aria-label="https://ivo-lee.tistory.com/91" rel="noopener" class="external-link" href="https://ivo-lee.tistory.com/91" target="_blank">ivo_lee</a>]]></description><link>모각코\[하계-모각코]-4차-개인-목표-및-결과.html</link><guid isPermaLink="false">모각코/[하계 모각코] 4차 개인 목표 및 결과.md</guid><pubDate>Wed, 31 Jul 2024 13:04:03 GMT</pubDate></item><item><title><![CDATA[1차 활동 개인 목표]]></title><description><![CDATA[ 
 <br><br>데이터 전처리가 무엇인지 알아보고 데이터 전처리의 방법에는 무엇이 있는 지 조사한다.<br><br>데이터 분석에 적합하도록 데이터를 정제하는 과정이다. 데이터의 형식, 값 등 때문에 생길 수 있는데이터 분석 과정 중의 오류를 최소화함으로서 데이터 분석의 효율적이고 효과적인 실시를 가능하게 만든다. 또한 데이터 분석의 신뢰도를 높임으로서 결과가 더 유의미해지는 데 큰 기여를 한다. 데이터 전처리의 주요한 요소로 결측값 처리, 이상치 처리, 분석변수 처리가 있다. <br><br>원천 데이터를 필요한 데이터의 형태로 바꿔나가는 일련의 과정이다. 특히 오류를 만들어 낼 수 있는 데이터를 대체, 수정, 삭제 등을 통해 적합한 데이터로 만들어 내는 과정이 필수적으로 수반된다. 오류의 원인으로는 결측값, 노이즈, 이상값 등이 있다. 결측값은 말그대로 필수적인 데이터가 입력되지 않은 경우를 뜻한다. 이 경우 평균값, 중앙값, 최빈값 등의 대푯값으로 대체 하거나 랜덤으로 많이 나온 값들 중에 하나로 대체하기도 한다. 다음으로 노이즈는 실제로 입력되지 않은 값이지만 입력되었다고 잘못 판단한 값이다. 이 경우 데이터값을 일정한 간격으로 이동시키면서 주변값과 비교하여 평균값으로 대체하거나 일정한 구간 내의 중간값으로 대체하다. 이상값은 데이터의 범위에서 많이 벗어난 값으로 아주 크거나 작은 값을 말한다. 이상값은 하한 이하는 하한 값으로, 상한 이상은 상한값으로 대체한다. <br>데이터 정제 기법로는 변환(Transform), 파싱(Parsing), 보강(Ehnhancement)등이 있다. 변환은 다양한 형태로 표현된 값을 일관된 형태로 변환하는 과정이다. 그 예로 여러 이미지 파일을 사용하기 위해 이미지의 형식을 jpg로 색을 흑백으로, 크기는 28px28px 로 변환하는 과정을 들 수 있다. 두 번째로 파싱은 데이터를 규칙을 적용하기 위해 유의미한 최소 단위로 분할하는 과정이다. 예로 이미지를 RGB로 분할하는 것을 들 수 있다. 다음으로 보강은 변환, 파싱, 수정 등을 통해 추가 정보를 반영하는 작업이다. 이미지를 회전, 확대, 기울임, 이동, 반전하는 것을 보강의 예로 들 수 있다.  <br>데이터 전처리의 정제 기술으로는 ETL, 맵듀리스, 플럼 등 수 많은 기술들이 존재한다. ETL은 Extract, transform, load의 약자로 여러 시스템에서 데이터를 추출하여 필요한 형태로 변환한 후 데이터 저장소에 저장(load)하는 기술이다. 이 기술이 사용되는 예로 IoT 같이 여러 플랫폼에서 정보를 수집하는 경우 여러 형태의 데이터를 수집하고 분석을 위해 변환 저장하는 것이 있다. 다음으로 맵듀리스는 Map기술과 Reduce기술로 구성되어 대용량 데이터 세트를 분산, 병렬 컴퓨팅 처리 및 생성을 목표로 하는 기술이다. Map 단계에서 데이터를 키-값 형식의 딕셔너리로 만들어 데이터를 분류한 후, Reduce 단계에서 중복된 데이터를 제거한다.  다음으로 플럼은 로그 데이터를 수집하고 처리하는 기술로, Source, Intercepter, Channel, Sink로 구성된 Agent 들로 instance를 생성한다. Source는 말그대로 다양한 시스템으로부터 데이터를 받아와 Channel에 전달하고, Channel에서는 데이터를 버퍼링하는 요소로 Sink 로 데이터를 전송한다. Sink는 최종 목적지(instance 생성)에 데이터를 저장하기 위한 단계이다. Intercepter는 Source와 Channel 사이에서 필터링 및 가공 기능을 제공하고 존재하지 않을 수 있는 단계이다. <br><br>https://.tistory.com/entry/Big-Data-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EC%B2%98%EB%A6%AC<br>
<a rel="noopener" class="external-link" href="https://cloud.google.com/learn/what-is-etl?hl=ko" target="_blank">https://cloud.google.com/learn/what-is-etl?hl=ko</a><br>
<a rel="noopener" class="external-link" href="https://kyeonminsu.tistory.com/11" target="_blank">https://kyeonminsu.tistory.com/11</a>]]></description><link>모각코\[하계-모각코]-1차-개인-목표-및-결과.html</link><guid isPermaLink="false">모각코/[하계 모각코] 1차 개인 목표 및 결과.md</guid><pubDate>Fri, 12 Jul 2024 06:21:35 GMT</pubDate></item><item><title><![CDATA[2차 활동 개인 목표]]></title><description><![CDATA[ 
 <br><br>소리 데이터 전처리 방법에 대해서 알아보는 것이 오늘의 목표이다. <br><br>연속적인 아날로그 신호를 디지털 신호로 저장하기 위해 초 당 n번으로 쪼개어 저장한다. 저장하는 과정은 양자화와 인코딩으로 나눌 수 있다. 양자화는 아날로그 신호를 디지털 신호로 바꾸기 위해 근사값을 구하는 과정이고 인코딩은 근사값을 2진법 비트로 저장하는 과정이다. 쪼개는 정도를 'Sampling rate'라고 한다. 인간의 가청 주파수는 20,000Hz이지만 데이터 손실을 최소화 하고자 <a data-tooltip-position="top" aria-label="https://ralasun.github.io/signal%20analysis/2021/07/01/nyq/" rel="noopener" class="external-link" href="https://ralasun.github.io/signal%20analysis/2021/07/01/nyq/" target="_blank">나이퀴스트 이론</a>에 따라 40,000Hz 이상이고 신호 왜곡을 최소화 하고자 44100Hz,48000Hz등 40,000Hz이상의 Sampling rate를 사용한다. <br>소리 데이터를 사용하고자 할 때, librosa 라이브러리를 사용할 수 있다.<br>
<a data-tooltip-position="top" aria-label="https://librosa.org/doc/latest/index.html" rel="noopener" class="external-link" href="https://librosa.org/doc/latest/index.html" target="_blank">librosa 공식 웹사이트</a><br>소리는 다양한 주파수들이 간섭하여 합쳐진  <br><br>오디오 신호의 대표적(고유적) 특징을 나타낼 수 있는 수치를 MFCC라고 한다.<br>
소리 데이터를 수십ms 간격의 여러 개의 프레임으로 나눈다.(Framing) 프레임들은 다음 과정 진행 후 다시 합쳐지는 과정에서 프레임의 좌우 경계값에서 신호가 불연속해져 실제 신호와 달라지는 문제점이 있어 Window function 을 이용하여 경계를 0으로 만들어 연속으로 만들거나 프레임간 겹치는 부분을 만들어 이 문제를 해결할 수 있다. 이후 프레임 각각에 대해 <a data-tooltip-position="top" aria-label="https://youtu.be/nmgFG7PUHfo?si=sOtZB9JqmvuUlQPb" rel="noopener" class="external-link" href="https://youtu.be/nmgFG7PUHfo?si=sOtZB9JqmvuUlQPb" target="_blank">FFT(Fast Fourier Transformation, 고속푸리에변환)</a>를 진행한다.  이 과정을 통해 소리 데이터가 어떤 주파수들로 이뤄져 있는지 알 수 있고 이 주파수들을 바탕으로 스펙트럼(Spectrum ; frequency-magnitude 그래프}을 알아 낼 수 있다. 이후 Mel-Filter bank라는 필터를 스펙트럼에 적용시킨다. 이 필터를 적용하면 사람들의 청각에 민감한 1000Hz 이하의 진동수에 대해서는 Linear scale로, 이상의 진동수에 대해서는 log  scale변환하는데 Mel scale triangular filter 등의 필터를 적용하여 변환한다. 이 과정을 통해 Mel spectrum을 구할 수 있다. 이후 스펙트럼에 log값을 취한  DCT(Discrete Cosine Transformation)를 통해 코사인 함수들의 합으로 표현해 내고 이 중 13번째 까지의 함수의 계수를 소리의 특징들로 사용한다. <br>스펙트럼은 진동수-데시벨 그래프로도 표현될 수 있는데, 이때 피크가 어디서 나타나는지 파악하여 어떤 진동수들에서 대표적 특징을 보이는지 알아낼 수 있다. 이때, 피크들을 Formants라고 부르고, Formats와 그래프의 극소점을 이은 곡선을 이용하여 소리의 대표적 특징을 분석하는 것을 cepstral analysis라고 한다. <br><br><a data-tooltip-position="top" aria-label="https://velog.io/@sbs524/%EC%9D%8C%EC%84%B1-%EC%9D%B8%EC%8B%9D-%EA%B8%B0%EC%B4%88-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EC%B2%98%EB%A6%AC-%EC%A2%85%EA%B2%B0-1" rel="noopener" class="external-link" href="https://velog.io/@sbs524/%EC%9D%8C%EC%84%B1-%EC%9D%B8%EC%8B%9D-%EA%B8%B0%EC%B4%88-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EC%B2%98%EB%A6%AC-%EC%A2%85%EA%B2%B0-1" target="_blank">서봉성</a><br>
<a data-tooltip-position="top" aria-label="https://hyunlee103.tistory.com/54" rel="noopener" class="external-link" href="https://hyunlee103.tistory.com/54" target="_blank">현토리</a><br>
<a data-tooltip-position="top" aria-label="https://brightwon.tistory.com/11" rel="noopener" class="external-link" href="https://brightwon.tistory.com/11" target="_blank">Bright Dev Archive</a>]]></description><link>모각코\[하계-모각코]-2차-개인-목표-및-결과.html</link><guid isPermaLink="false">모각코/[하계 모각코] 2차 개인 목표 및 결과.md</guid><pubDate>Fri, 19 Jul 2024 13:03:25 GMT</pubDate></item><item><title><![CDATA[index]]></title><description><![CDATA[ 
 <br>]]></description><link>index.html</link><guid isPermaLink="false">index.md</guid><pubDate>Wed, 26 Jun 2024 13:06:53 GMT</pubDate></item></channel></rss>